// Generated by CoffeeScript 1.6.3
var BaseParser, JsonParser, PropertiesParser, PropertiesReader, TransifexParser, YamlParser, fs, path, _ref, _ref1, _ref2, _ref3,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

fs = require('fs');

path = require('path');

PropertiesReader = require('properties-reader');

BaseParser = (function() {
  function BaseParser(grunt) {
    this.grunt = grunt;
  }

  BaseParser.prototype.resolveLocale = function(localePath) {
    return path.basename(localePath, path.extname(localePath));
  };

  return BaseParser;

})();

JsonParser = (function(_super) {
  __extends(JsonParser, _super);

  function JsonParser() {
    _ref = JsonParser.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  JsonParser.prototype.name = 'json';

  JsonParser.prototype.readLocaleData = function(localePath) {
    return this.grunt.file.readJSON(localePath);
  };

  return JsonParser;

})(BaseParser);

"Locales from Transifex have one property to name the particular locale, with the\ntranslations all below that. E.G. { \"en\": {\"message\": \"Hello, world!\"} }";

TransifexParser = (function(_super) {
  __extends(TransifexParser, _super);

  function TransifexParser() {
    _ref1 = TransifexParser.__super__.constructor.apply(this, arguments);
    return _ref1;
  }

  TransifexParser.prototype.name = 'transifex';

  TransifexParser.prototype.readLocaleData = function(localePath) {
    var data, keys;
    data = TransifexParser.__super__.readLocaleData.apply(this, arguments);
    keys = Object.keys(data);
    if (keys.length === 1 && typeof data[keys[0]] === 'object') {
      return data[keys[0]];
    } else {
      return data;
    }
  };

  return TransifexParser;

})(JsonParser);

YamlParser = (function(_super) {
  __extends(YamlParser, _super);

  function YamlParser() {
    _ref2 = YamlParser.__super__.constructor.apply(this, arguments);
    return _ref2;
  }

  YamlParser.prototype.name = 'yaml';

  YamlParser.prototype.readLocaleData = function(localePath) {
    return this.grunt.file.readYAML(localePath);
  };

  return YamlParser;

})(BaseParser);

PropertiesParser = (function(_super) {
  __extends(PropertiesParser, _super);

  function PropertiesParser() {
    _ref3 = PropertiesParser.__super__.constructor.apply(this, arguments);
    return _ref3;
  }

  PropertiesParser.prototype.name = 'properties';

  PropertiesParser.prototype.resolveLocale = function(localePath) {
    return (path.extname(localePath)).substring(1);
  };

  PropertiesParser.prototype.readLocaleData = function(localePath) {
    return PropertiesReader(localePath).path();
  };

  return PropertiesParser;

})(BaseParser);

module.exports = function(grunt) {
  var jsonParser, propertiesParser, result, transifexParser, yamlParser;
  jsonParser = new JsonParser(grunt);
  transifexParser = new TransifexParser(grunt);
  yamlParser = new YamlParser(grunt);
  propertiesParser = new PropertiesParser(grunt);
  result = {};
  result[jsonParser.name] = jsonParser;
  result[transifexParser.name] = transifexParser;
  result[yamlParser.name] = yamlParser;
  result[propertiesParser.name] = propertiesParser;
  return result;
};
