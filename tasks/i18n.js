// Generated by CoffeeScript 1.6.3
var parsers;

parsers = require('./i18n-parsers');

module.exports = function(grunt) {
  var generateOutputPath, translateTemplate;
  grunt.registerMultiTask('i18n', 'Localize Grunt templates', function() {
    var locale, localeData, localePath, localePaths, options, outputPath, parser, template, templatePath, _i, _len, _ref, _results;
    options = this.options({
      locales: [],
      output: '.',
      base: '',
      format: 'json'
    });
    grunt.verbose.writeflags(options, 'Options');
    parser = options.parser ? options.parser : parsers(grunt)[options.format];
    _ref = this.filesSrc;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      templatePath = _ref[_i];
      if (grunt.file.isFile(templatePath)) {
        localePaths = grunt.file.expand(options.locales);
        _results.push((function() {
          var _j, _len1, _results1;
          _results1 = [];
          for (_j = 0, _len1 = localePaths.length; _j < _len1; _j++) {
            localePath = localePaths[_j];
            locale = parser.resolveLocale(localePath);
            outputPath = generateOutputPath(templatePath, locale, options);
            localeData = parser.readLocaleData(localePath);
            template = translateTemplate(templatePath, localeData, options);
            grunt.verbose.writeln("Translating '" + templatePath + "' with locale '" + localePath + "' to '" + outputPath + "'.");
            _results1.push(grunt.file.write(outputPath, template));
          }
          return _results1;
        })());
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  });
  translateTemplate = function(templatePath, localeData, options) {
    var template, templateOptions;
    template = grunt.file.read(templatePath);
    templateOptions = {
      data: localeData
    };
    if (options.delimiters) {
      templateOptions.delimiters = options.delimiters;
    }
    return grunt.template.process(template, templateOptions);
  };
  generateOutputPath = function(templatePath, locale, options) {
    var filePath, trimmedFilePath;
    if (grunt.util._.startsWith(templatePath, options.base)) {
      filePath = templatePath.slice(options.base.length);
    }
    trimmedFilePath = grunt.util._.trim(filePath, '/');
    return [options.output, locale, trimmedFilePath].join('/');
  };
  return this;
};
